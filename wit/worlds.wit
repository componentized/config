package componentized:config;

world empty {
    export wasi:config/store@0.2.0-draft;
}

world defaults {
    import wasi:config/store@0.2.0-draft;
    import defaults: interface {
        // inline wasi:config/store@0.2.0-draft since you can't rename an interface
        variant error {
            upstream(string),
            io(string),
        }
        get: func(key: string) -> result<option<string>, error>;
        get-all: func() -> result<list<tuple<string, string>>, error>;
    }
    export wasi:config/store@0.2.0-draft;
}

world overlay {
    import wasi:config/store@0.2.0-draft;
    import overlay: interface {
        // inline wasi:config/store@0.2.0-draft since you can't rename an interface
        variant error {
            upstream(string),
            io(string),
        }
        get: func(key: string) -> result<option<string>, error>;
        get-all: func() -> result<list<tuple<string, string>>, error>;
    }
    export wasi:config/store@0.2.0-draft;
}

world remap {
    import wasi:config/store@0.2.0-draft;
    import mapping: interface {
        // inline wasi:config/store@0.2.0-draft since you can't rename an interface
        variant error {
            upstream(string),
            io(string),
        }
        get: func(key: string) -> result<option<string>, error>;
        get-all: func() -> result<list<tuple<string, string>>, error>;
    }
    export wasi:config/store@0.2.0-draft;
}

world scope {
    import wasi:config/store@0.2.0-draft;
    import scope: interface {
        // inline wasi:config/store@0.2.0-draft since you can't rename an interface
        variant error {
            upstream(string),
            io(string),
        }
        get: func(key: string) -> result<option<string>, error>;
        get-all: func() -> result<list<tuple<string, string>>, error>;
    }
    export wasi:config/store@0.2.0-draft;
}

world from-environment {
    import wasi:cli/environment@0.2.3;
    export wasi:config/store@0.2.0-draft;
}
